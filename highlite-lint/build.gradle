apply plugin: 'java'
apply plugin: 'checkstyle'

sourceCompatibility = rootProject.ext.sourceCompatibilityVersion
targetCompatibility = rootProject.ext.targetCompatibilityVersion

dependencies {
    compileOnly deps.lintapi
    compileOnly deps.lintchecks

    testImplementation deps.junit
    testImplementation deps.lint
    testImplementation deps.linttests
    testImplementation deps.android
    testImplementation deps.mockito
    testImplementation project(':highlite-annotations')
}

checkstyle {
    configFile rootProject.file('checkstyle.xml')
    showViolations true
    sourceSets = [sourceSets.main]
}

task createProperties(dependsOn: processResources) << {
    Properties properties = new Properties()
    File localProps = project.rootProject.file('local.properties')
    def sdkToolsDir
    if (localProps.exists()) {
        properties.load(localProps.newDataInputStream())
        sdkToolsDir = properties.getProperty('sdk.dir') + "/tools"
    } else {
        sdkToolsDir = ""
    }

    File file = new File("$buildDir/classes/test/com/jeppeman/highlite/tests")
    if (!file.exists()) {
        file.mkdirs()
    }

    File props = new File(file, 'sdktools.properties')

    if (!props.exists()) {
        props.createNewFile()
    }

    props.withWriter { w ->
        Properties p = new Properties()
        p['sdkToolsDir'] = sdkToolsDir
        p.store w, null
    }
}

testClasses {
    dependsOn createProperties
}

jar {
    manifest {
        attributes 'Lint-Registry': 'com.jeppeman.highlite.LintRegistry'
    }
}